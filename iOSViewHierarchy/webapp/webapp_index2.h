//
//  webapp_index2.h
//  iOSHierarchyViewer
//
//
// THIS FILE IS GENERATED AUTOMATICALLY BY XCODE's script
//
//

#ifndef iOSHierarchyViewer_webapp_index2 
#define iOSHierarchyViewer_webapp_index2 

#define WEBAPP_INDEX2 @""

#endif
